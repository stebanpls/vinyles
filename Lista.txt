Lista de Pasos para Implementar Sistema de Autenticación en Django (Proyecto Vinyles)

--- Pasos Completados y en Proceso ---

1.  **Preparación del Entorno y Proyecto (Revisión Inicial):**
    *   Verificación del entorno virtual.
    *   Instalación de Django y `django-widget-tweaks`.
    *   Configuración básica en `vinyles/settings.py` (`INSTALLED_APPS`, `LOGIN_REDIRECT_URL`, `LOGIN_URL`, `LOGOUT_REDIRECT_URL`).

2.  **Configuración de URLs de Autenticación (`gestion/urls.py` y `vinyles/urls.py`):**
    *   Definición de URLs para vistas personalizadas de login (`pub_login`, `pub_login_administrador`), registro (`pub_registro`) y página de logout (`pub_log_out`).
    *   Inclusión de URLs de autenticación incorporadas de Django: `path('accounts/', include('django.contrib.auth.urls'))`.
    *   Asegurar que `gestion.urls` esté incluido en `vinyles.urls`.

3.  **Implementación de la Lógica de Autenticación Real en Vistas de Login (`gestion/views.py`):**
    *   Modificación de `pub_login` y `pub_login_administrador` para usar `authenticate()` y `auth_login()`.
    *   Manejo de redirecciones por rol.
    *   Uso de `django.contrib.messages` para feedback al usuario.
    *   Consideración para el paso de datos del álbum (lógica del carrito pendiente).
    *   Repoblado de campos en caso de error de login.

4.  **Implementación de la Lógica de Registro de Usuarios:**
    *   **Formulario (`gestion/forms.py`):** Creación de `UserRegistrationForm` usando el modelo `User` estándar, pidiendo `username`, `first_name`, `email`, `password` y `password2`, con validación de contraseñas.
    *   **Vista (`gestion/views.py`):** Implementación de `pub_registro` para procesar el formulario, crear el `User` (hasheando contraseña), mostrar mensajes y redirigir.
    *   **Plantilla (`gestion/templates/paginas/publico/pub_registro.html`):** Actualización para renderizar el `UserRegistrationForm`.

5.  **Creación de Plantillas para Vistas de Autenticación Incorporadas de Django:**
    *   Creación de la carpeta `gestion/templates/registration/`.
    *   Creación y llenado de los archivos HTML: `password_change_form.html`, `password_change_done.html`, `password_reset_form.html`, `password_reset_done.html`, `password_reset_confirm.html`, `password_reset_complete.html`.
    *   Estas plantillas extienden la plantilla base y renderizan `{{ form }}`.

6.  **Definición del Modelo `ClienteProfile` (`gestion/models.py`):**
    *   Creación del modelo `ClienteProfile` con `OneToOneField` a `User`.
    *   Añadido de campos como `numero_documento`, `celular`, `direccion_residencia`.
    *   Implementación de una señal (`@receiver(post_save, sender=User)`) para crear automáticamente un `ClienteProfile` al crear un `User`.

7.  **Ejecución de Migraciones:**
    *   Ejecución de `python manage.py makemigrations gestion` y `python manage.py migrate` para aplicar cambios del modelo `ClienteProfile`.

8.  **Actualización de Plantillas Base para Enlaces Condicionales:**
    *   Modificación de `plantilla_publico.html`, `plantilla_comprador.html`, `plantilla_vendedor.html`, y `plantilla_administrador.html` para mostrar enlaces de navegación diferentes según el estado de autenticación del usuario (`{% if user.is_authenticated %}`). Asegurarse de que los enlaces a perfil (comprador/vendedor) apunten a las URLs correctas.
    *   Asegurar que "Cerrar Sesión" apunte a `{% url 'logout' %}`.

9.  **Creación de Superusuario:**
    *   Ejecución de `python manage.py createsuperuser`.

10. **Registrar `ClienteProfile` en el Admin (`gestion/admin.py`):**
    *   Importación y registro del modelo `ClienteProfile` para gestión en el panel de admin.

11. **Proteger Vistas de Administrador (`gestion/views.py`):**
    *   Aplicación de `@login_required` y `@user_passes_test(lambda u: u.is_staff, login_url='pub_login')` a vistas de administrador.

--- Paso Actual y Siguientes Pasos Inmediatos ---

12. **Probar Exhaustivamente Todo el Sistema de Autenticación:**
    *   Verificar registro (éxito y errores).
    *   Verificar login de comprador (éxito, errores, redirección, UI).
    *   Verificar login de administrador (éxito, error con cuenta no admin, redirección, UI).
    *   Verificar logout (redirección, UI).
    *   Verificar cambio de contraseña (accediendo a `/accounts/password_change/`).
    *   Verificar flujo de reseteo de contraseña (accediendo a `/accounts/password_reset/`, revisando consola para enlace).
    *   Verificar acceso a páginas protegidas (sin login, con login de rol incorrecto).

13. **Dinamizar la Interfaz Pública (Tienda):**
    *   **Página de Inicio (`pub_inicio`):**
        *   **Vista (`gestion/views.py`):** Modificar `pub_inicio` para que consulte las `Publicacion`es activas y las pase a la plantilla. **(Completado)**
        *   **Plantilla (`gestion/templates/paginas/publico/pub_inicio.html`):** Reemplazar el contenido estático con un bucle `{% for %}` que muestre los productos dinámicamente. **(Completado)**
        *   **Configuración (`vinyles/settings.py`):** Añadir `'django.contrib.humanize'` a `INSTALLED_APPS` para formateo de precios. **(Completado)**
    *   **Página de Detalles del Producto (`pub_vinilo`):**
        *   **Vista (`gestion/views.py`):** Modificar `pub_vinilo` para que acepte un `producto_id`, busque el `Producto` y sus `Publicacion`es asociadas, y los pase a la plantilla. **(Completado)**
        *   **Plantilla (`gestion/templates/paginas/publico/pub_vinilo.html`):** Actualizar la plantilla para mostrar la información detallada del `producto` (portada, nombre, artistas, tracklist) y un listado de las `publicaciones` (ofertas de vendedores con su precio y condición). **(Completado)**
    *   **Página de Inicio del Comprador (`com_inicio`):**
        *   Hacer que la página de inicio para usuarios autenticados (`com_inicio`) también muestre productos, similar a `pub_inicio`, pero con la funcionalidad de "Agregar al carrito" ya activa (sin redirigir al login). **(Pendiente)**

--- Pasos Futuros (Después de que la tienda pública básica funcione) ---

14. **Implementar Funcionalidad de Carrito de Compras:**
    *   **Lógica de Sesión:** Crear vistas o funciones de ayuda para añadir, ver y eliminar productos del carrito, almacenando la información en la sesión del usuario (`request.session`).
    *   **Integración en Plantillas:** Modificar los botones "Agregar al carrito" en `pub_inicio.html` y `pub_vinilo.html` para que llamen a la vista correspondiente, probablemente usando AJAX para una mejor experiencia de usuario.
    *   **Vista del Carrito (`com_carrito`):** Hacer que la vista `com_carrito` lea los datos de la sesión y muestre un resumen de los productos en el carrito.

--- Pasos Futuros (Después de que el sistema de autenticación básico funcione bien) ---

15. **Proteger Vistas de Comprador y Vendedor (`gestion/views.py`):**
    *   Aplicar `@login_required` a todas las vistas `com_*` y `ven_*`.
    *   Definir e implementar un mecanismo para identificar "Vendedores" y aplicar `@user_passes_test` a vistas `ven_*`.

16. **Implementar Funcionalidad de "Mi Perfil" (Edición):**
    *   **Crear/Actualizar Formulario de Edición:** Crear un nuevo formulario en `gestion/forms.py` (ej. `ClienteProfileForm` o `PerfilEdicionForm`) que maneje los campos del modelo `Cliente` (numero_documento, celular, direccion_residencia, foto_perfil, generos_favoritos) y, opcionalmente, campos del `User` (first_name, last_name, email) y la lógica de cambio de contraseña.
    *   **Modificar Vistas de Perfil (`com_perfil`, `ven_perfil` en `gestion/views.py`):**
        *   Añadir lógica para manejar solicitudes `POST`.
        *   En `GET`: Obtener el objeto `Cliente` del usuario (`request.user.cliente`), obtener todos los `Genero`s, obtener los IDs de los géneros favoritos del usuario. Pasar estos datos al contexto de la plantilla. Instanciar el formulario de edición con los datos existentes (`instance=request.user.cliente`).
        *   En `POST`: Instanciar el formulario de edición con los datos enviados (`request.POST`, `request.FILES`) y la instancia existente (`instance=request.user.cliente`). Validar el formulario (`is_valid()`). Si es válido, guardar los cambios en el modelo `Cliente` (el formulario `ModelForm` ayuda con esto). Manejar la lógica específica para la foto de perfil (guardar el archivo). Manejar la lógica para actualizar los géneros favoritos (borrar los antiguos, añadir los nuevos seleccionados). Manejar el cambio de contraseña si se proporcionó (usando `request.user.set_password()` y `request.user.save()`). Mostrar mensajes de éxito/error (`messages`). Redirigir (ej. a la misma página de perfil).
        *   Añadir manejo de errores (`try...except Cliente.DoesNotExist`) en ambas vistas para obtener el perfil del cliente.
    *   **Modificar Plantillas de Perfil (`com_perfil.html`, `ven_perfil.html`):**
        *   Integrar el formulario de edición dentro de la plantilla.
        *   Usar `{{ form.as_p }}` o renderizar los campos manualmente (`{{ form.campo.label_tag }} {{ form.campo }}`) para mostrar el formulario.
        *   Asegurar que el formulario tenga `method="POST"` y `enctype="multipart/form-data"` (si se permite subir archivos).
        *   Incluir `{% csrf_token %}`.
        *   Mostrar mensajes de Django (`{% if messages %}`).

17. **Manejo de Datos del Álbum en el Login:**
    *   Implementar lógica en `pub_login` para que, si un usuario llega desde una página de producto, se le redirija al carrito o se añada el producto al carrito después del login (posiblemente usando sesiones).

18. **Configuración de Envío de Emails para Producción:**
    *   Configurar `EMAIL_BACKEND`, `EMAIL_HOST`, `EMAIL_PORT`, `EMAIL_HOST_USER`, `EMAIL_HOST_PASSWORD`, etc., en `settings.py` para que el reseteo de contraseña envíe emails reales.

19. **Refinamiento de la Interfaz de Usuario y Mensajes:**
    *   Asegurar claridad y utilidad de todos los mensajes al usuario.
    *   Mejorar diseño y usabilidad de formularios y páginas de autenticación.

20. **Seguridad Adicional (Consideraciones):**
    *   Revisar configuraciones de seguridad de Django para producción.
    *   Considerar autenticación de dos factores (2FA) si es necesario.

Editar Perfil
