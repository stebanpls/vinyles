name: Django CI

on:
  push:
    branches: [ "**" ] # Ejecutar en CUALQUIER push a CUALQUIER rama
  pull_request:
    branches: [ "**" ] # Ejecutar en CUALQUIER pull request a CUALQUIER rama

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Install MariaDB client for pip-audit
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libmariadb-dev
      - name: Run pre-commit checks
        run: |
          # Ejecuta todos los hooks definidos en el archivo de configuración.
          # Falla si algún hook modifica archivos o encuentra errores.
          pre-commit run --all-files

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10", "3.11"]

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 --password=testpassword"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
    - name: Install MariaDB client
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libmariadb-dev
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      env:
        # Configuración de Django
        DJANGO_SECRET_KEY: 'dummy-key-for-testing-in-ci'
        DEBUG: 'False'
        # Configuración de la Base de Datos para el servicio temporal
        DB_NAME: testdb
        DB_USER: root
        DB_PASSWORD: testpassword
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
      run: |
        python manage.py test

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Asegura que este trabajo se ejecute solo si los otros trabajos son exitosos
    needs: [quality, test]
    # Esta condición asegura que el despliegue solo ocurra en un push a la rama 'main'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django migrations
        env:
          # DEBES configurar estos secretos en los ajustes de tu repositorio:
          # Settings > Secrets and variables > Actions > New repository secret
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 'False'
          DB_NAME: ${{ secrets.PROD_DB_NAME }}
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          DB_HOST: ${{ secrets.PROD_DB_HOST }}
          DB_PORT: ${{ secrets.PROD_DB_PORT }}
          # Añade aquí cualquier otra variable de entorno que necesite tu app en producción
          DISCOGS_USER_TOKEN: ${{ secrets.DISCOGS_USER_TOKEN }}
        run: |
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput

      - name: Deploy Application
        env:
          # Ejemplo para un proveedor que usa una clave de API
          PROVIDER_API_KEY: ${{ secrets.PROVIDER_API_KEY }}
        run: |
          echo "Deploying to production..."
          # Reemplaza el comando de abajo con el comando real para tu proveedor de hosting
          # Ejemplos: 'heroku container:push web', 'eb deploy', o un script personalizado.
          echo "Deployment command placeholder"
